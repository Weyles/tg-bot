import telebot
import logging
import os
import json
import gspread
from google.oauth2.service_account import Credentials

SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
    "https://www.googleapis.com/auth/drive.file"
]

SHEET_ID = "1TEBRTf_gRi2w-YaOPmouH95tPUR-y5LQIBHKrJ0wjmE"

# –û—Ç—Ä–∏–º—É—î–º–æ credentials –∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
creds_json = os.environ.get('GOOGLE_CREDENTIALS')
if not creds_json:
    raise Exception("‚ùå GOOGLE_CREDENTIALS –Ω–µ –∑–∞–¥–∞–Ω–æ!")

creds_dict = json.loads(creds_json)
creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
client = gspread.authorize(creds)
sheet = client.open_by_key(SHEET_ID).worksheet("Bot Database")



# ---------------------- –ë–û–¢ ----------------------
import telebot
TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    raise Exception("‚ùå TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ!")

bot = telebot.TeleBot(TOKEN)

# –°–∏—Å—Ç–µ–º–∞ –±–∞–ª—ñ–≤ –∑–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
DURATION_POINTS = {
    "‚â§ 5 —Ö–≤.": 1,
    "‚â§ 15 —Ö–≤.": 2,
    "‚â§ 30 —Ö–≤.": 3,
    "‚â§ 45 —Ö–≤.": 4,
    "‚â• 1 –≥–æ–¥.": "review"  # –ü–æ—Ç—Ä–µ–±—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
}

# –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –¥–ª—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_sessions = {}
admin_review_sessions = {}  # –î–ª—è –æ—Ü—ñ–Ω–∫–∏ —Ä–æ–±—ñ—Ç –∞–¥–º—ñ–Ω–æ–º
admin_goal_sessions = {}    # –î–ª—è –∑–º—ñ–Ω–∏ –º–µ—Ç–∏ –∞–¥–º—ñ–Ω–æ–º

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó GOOGLE SHEETS
def init_user_data(user_id, username, first_name):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ"""
    try:
        # –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ
        records = sheet.get_all_records()
        for i, record in enumerate(records, start=2):
            if record.get('user_id') == user_id:
                return record

        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
        new_user_data = {
            'user_id': user_id,
            'username': username,
            'first_name': first_name,
            'english': 0,
            'workout': 0,
            'stretching': 0,
            'other': 0,
            'total_points': 0,
            'goal': 100,
            'last_activity': '',
            'gifts_received': 0
        }

        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫
        next_row = len(sheet.get_all_values()) + 1
        sheet.append_row(list(new_user_data.values()))
        logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {first_name} (ID: {user_id})")
        return new_user_data

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        return None


def get_user_data(user_id):
    """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ"""
    try:
        records = sheet.get_all_records()
        for record in records:
            if record.get('user_id') == user_id:
                return record
        return None
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        return None


def update_user_data(user_id, updates):
    """–û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ"""
    try:
        records = sheet.get_all_records()
        for i, record in enumerate(records, start=2):
            if record.get('user_id') == user_id:
                # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª—è
                for key, value in updates.items():
                    if key in record:
                        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                        col_index = list(record.keys()).index(key) + 1
                        sheet.update_cell(i, col_index, value)
                print(f"‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –æ–Ω–æ–≤–ª–µ–Ω—ñ: {updates}")
                return True
        print(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
        return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        return False


def update_activity_log(row_id, updates):
    """–û–Ω–æ–≤–ª—é—î –∑–∞–ø–∏—Å –≤ –ª–æ–∑—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
    try:
        log_sheet = workbook.worksheet("Activity Logs")

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–ª—è
        for col_name, value in updates.items():
            col_index = None
            headers = log_sheet.row_values(1)
            print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ª–æ–≥—É: {headers}")

            if col_name == "points_earned" and "Points Earned" in headers:
                col_index = headers.index("Points Earned") + 1
            elif col_name == "admin_reviewed" and "Admin Reviewed" in headers:
                col_index = headers.index("Admin Reviewed") + 1

            if col_index:
                log_sheet.update_cell(row_id, col_index, value)
                print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–º—ñ—Ä–∫—É [{row_id}, {col_index}] –∑–Ω–∞—á–µ–Ω–Ω—è–º '{value}'")

        print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (—Ä—è–¥–æ–∫ {row_id}): {updates}")
        return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ª–æ–≥—É: {e}")
        return False


def get_gift_data():
    """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫"""
    try:
        gift_sheet = workbook.worksheet("Gift Settings")
        records = gift_sheet.get_all_records()
        if records:
            return records[0]  # –ü–µ—Ä—à–∏–π –∑–∞–ø–∏—Å - –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫
        else:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            default_gift = {
                'goal': 100,
                'description': "–ì—Ä–∞ 'The Witcher 3: Wild Hunt'\n–ü–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ —É—Å—ñ–º–∞ DLC!",
                'photo_file_id': None
            }
            gift_sheet.append_row([default_gift['goal'], default_gift['description'], default_gift['photo_file_id']])
            return default_gift
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –ø–æ–¥–∞—Ä—É–Ω–∫–∞: {e}")
        return {'goal': 100, 'description': "–ì—Ä–∞ 'The Witcher 3: Wild Hunt'", 'photo_file_id': None}


def update_gift_data(updates):
    """–û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–¥–∞—Ä—É–Ω–æ–∫"""
    try:
        gift_sheet = workbook.worksheet("Gift Settings")
        current_data = get_gift_data()

        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
        for key, value in updates.items():
            current_data[key] = value

        # –û—á–∏—â–∞—î–º–æ –ª–∏—Å—Ç —ñ –¥–æ–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
        gift_sheet.clear()
        gift_sheet.append_row(['goal', 'description', 'photo_file_id'])  # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        gift_sheet.append_row([current_data['goal'], current_data['description'], current_data['photo_file_id']])

        logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ –¥–∞–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∞: {updates}")
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –ø–æ–¥–∞—Ä—É–Ω–∫–∞: {e}")
        return False

def add_activity_log(user_id, activity_type, description, duration, points_earned, has_photo=False, needs_review=False,
                     photo_file_id=None, admin_reviewed=False):
    """–î–æ–¥–∞—î –∑–∞–ø–∏—Å –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤ –ª–∏—Å—Ç –ª–æ–≥—ñ–≤"""
    try:
        log_sheet = workbook.worksheet("Activity Logs")
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        log_entry = [
            timestamp,
            user_id,
            activity_type,
            description,
            duration,
            "–¢–∞–∫" if has_photo else "–ù—ñ",
            points_earned,
            "–¢–∞–∫" if needs_review else "–ù—ñ",
            photo_file_id or "",
            "–¢–∞–∫" if admin_reviewed else "–ù—ñ"
        ]

        log_sheet.append_row(log_entry)
        logger.info(f"–î–æ–¥–∞–Ω–æ –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ ID —Ä—è–¥–∫–∞ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        return len(log_sheet.get_all_values())

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ª–æ–≥—É: {e}")
        return None

def setup_sheets_structure():
    """–°—Ç–≤–æ—Ä—é—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—å —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î"""
    try:
        try:
            log_sheet = workbook.worksheet("Activity Logs")
        except gspread.exceptions.WorksheetNotFound:
            log_sheet = workbook.add_worksheet(title="Activity Logs", rows=1000, cols=10)
            # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            log_headers = ["Timestamp", "User ID", "Activity Type", "Description", "Duration", "Has Photo",
                           "Points Earned", "Needs Review", "Photo File ID", "Admin Reviewed"]
            log_sheet.append_row(log_headers)
            logger.info("–°—Ç–≤–æ—Ä–µ–Ω–æ –ª–∏—Å—Ç 'Activity Logs'")

        try:
            gift_sheet = workbook.worksheet("Gift Settings")
        except gspread.exceptions.WorksheetNotFound:
            gift_sheet = workbook.add_worksheet(title="Gift Settings", rows=10, cols=3)
            # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –¥–∞–Ω—ñ
            gift_sheet.append_row(['goal', 'description', 'photo_file_id'])
            gift_sheet.append_row([100, "–ì—Ä–∞ 'The Witcher 3: Wild Hunt'\n–ü–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ —É—Å—ñ–º–∞ DLC!", ""])
            logger.info("–°—Ç–≤–æ—Ä–µ–Ω–æ –ª–∏—Å—Ç 'Gift Settings'")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
        main_sheet = workbook.worksheet("Bot Database")
        current_headers = main_sheet.row_values(1)

        required_headers = [
            "user_id", "username", "first_name",
            "english", "workout", "stretching", "other",
            "total_points", "goal", "last_activity", "gifts_received"
        ]

        if current_headers != required_headers:
            main_sheet.clear()
            main_sheet.append_row(required_headers)
            logger.info("–û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ 'Bot Database'")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏: {e}")


def is_brother(user_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - —Ü–µ –±—Ä–∞—Ç"""
    return user_id == BROTHER_ID


def is_admin(user_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - —Ü–µ –∞–¥–º—ñ–Ω"""
    return user_id == MY_ID


def create_progress_bar(current, goal, bar_length=15):
    """–°—Ç–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç–æ–≤—É —à–∫–∞–ª—É –ø—Ä–æ–≥—Ä–µ—Å—É"""
    progress = min(current / goal, 1.0)
    filled_length = int(bar_length * progress)
    bar = '‚ñà' * filled_length + '‚ñë' * (bar_length - filled_length)
    return f"[{bar}] {current}/{goal} ({progress:.1%})"


# –ö–û–ú–ê–ù–î–ò –ë–û–¢–ê
@bot.message_handler(commands=['start'])
def start_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º"""
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ–º–∞—î username"
    first_name = message.from_user.first_name or "–ú–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫"

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ö—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    if is_brother(user_id):
        user_data = init_user_data(user_id, username, first_name)

        if user_data:
            gift_data = get_gift_data()
            welcome_text = (
                f"üéÆ *–í—ñ—Ç–∞—é, {first_name}!* üéÆ\n\n"
                f"üõ°Ô∏è *–¢–∏ –≤–≤—ñ–π—à–æ–≤ —É –°–∏—Å—Ç–µ–º—É –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ù–∞–≤–∏—á–æ–∫!*\n\n"
                f"üìö *–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–∞–≤–∏—á–∫–∏:*\n"
                f"‚Ä¢ üè¥‚Äç‚ò†Ô∏è –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –º–æ–≤–∞\n"
                f"‚Ä¢ üí™ –°–∏–ª–æ–≤–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n" 
                f"‚Ä¢ üßò –ì–Ω—É—á–∫—ñ—Å—Ç—å —Ç–∞ —Ä–æ–∑–º–∏–Ω–∫–∞\n"
                f"‚Ä¢ üîÆ –Ü–Ω—à—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ\n\n"
                f"‚≠ê *–°–∏—Å—Ç–µ–º–∞ –±–∞–ª—ñ–≤:*\n"
                f"–ó–∞ –∫–æ–∂–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–∏ –æ—Ç—Ä–∏–º—É—î—à –¥–æ—Å–≤—ñ–¥!\n"
                f"–ö–æ–ª–∏ –Ω–∞–∫–æ–ø–∏—á–∏—à –¥–æ—Å—Ç–∞—Ç–Ω—å–æ - –æ—Ç—Ä–∏–º–∞—î—à *–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É –Ω–∞–≥–æ—Ä–æ–¥—É!* üéÅ\n\n"
                f"üéØ *–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–ª—å:* {gift_data['goal']} XP\n"
                f"üí´ *–¢–≤—ñ–π –¥–æ—Å–≤—ñ–¥:* {user_data['total_points']} XP\n\n"
                f"*–û–±–µ—Ä–∏ –¥—ñ—é, –º—ñ–π –¥—Ä—É–∂–µ:*"
            )
        else:
            welcome_text = "‚ö° –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."

        show_main_menu(message.chat.id, welcome_text)

    elif is_admin(user_id):
        admin_welcome_text = (
            f"üëë *–í—ñ—Ç–∞—é, –í–æ–ª–æ–¥–∞—Ä—é!* üëë\n\n"
            f"–¢–∏ –∑–∞–π—à–æ–≤ —É *–ü–∞–Ω–µ–ª—å –ö–µ—Ä—É–≤–∞–Ω–Ω—è –°–≤—ñ—Ç–æ–º*.\n"
            f"–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º–æ—é –º–æ—Ç–∏–≤–∞—Ü—ñ—ó —Å–≤–æ–≥–æ —É—á–Ω—è.\n\n"
            f"‚öîÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤–π –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π!"
        )
        show_admin_menu(message.chat.id, admin_welcome_text)

    else:
        bot.send_message(
            message.chat.id,
            "üö´ *–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!*\n\n–¶–µ–π —Å–≤—ñ—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –ª–∏—à–µ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤.",
            reply_markup=types.ReplyKeyboardRemove(),
            parse_mode='Markdown'
        )


def show_main_menu(chat_id, text):
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è –±—Ä–∞—Ç–∞"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üìä –ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å')
    btn2 = types.KeyboardButton('‚öîÔ∏è –ù–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å')
    btn3 = types.KeyboardButton('üéÅ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞')
    markup.add(btn1, btn2, btn3)
    bot.send_message(chat_id, text, reply_markup=markup, parse_mode='Markdown')


def show_admin_menu(chat_id, text):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –¥–ª—è –∞–¥–º—ñ–Ω–∞"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üëë –ü–∞–Ω–µ–ª—å –í–æ–ª–æ–¥–∞—Ä—è')
    markup.add(btn1)
    bot.send_message(chat_id, text, reply_markup=markup, parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == 'üìä –ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å' and is_brother(message.from_user.id))
def show_stats(message):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –±—Ä–∞—Ç–∞)"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if not user_data:
        bot.send_message(message.chat.id, "üîÆ –î–∞–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ. –ü–æ—á–Ω–∏ –∑ /start")
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ì–µ—Ä–æ—è:*\n\n"
        f"üè¥‚Äç‚ò†Ô∏è –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –º–æ–≤–∞: *{user_data['english']} —Ä–∞–∑—ñ–≤*\n"
        f"üí™ –°–∏–ª–æ–≤–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: *{user_data['workout']} —Ä–∞–∑—ñ–≤*\n"
        f"üßò –ì–Ω—É—á–∫—ñ—Å—Ç—å —Ç–∞ —Ä–æ–∑–º–∏–Ω–∫–∞: *{user_data['stretching']} —Ä–∞–∑—ñ–≤*\n"
        f"üîÆ –Ü–Ω—à—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: *{user_data['other']} —Ä–∞–∑—ñ–≤*\n\n"
        f"‚≠ê *–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Å–≤—ñ–¥:* {user_data['total_points']} XP\n"
        f"üéØ *–¶—ñ–ª—å –¥–ª—è –Ω–∞–≥–æ—Ä–æ–¥–∏:* {user_data['goal']} XP\n"
        f"üèÜ *–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–∞–≥–æ—Ä–æ–¥:* {user_data['gifts_received']}"
    )

    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
    progress_bar = create_progress_bar(user_data['total_points'], user_data['goal'])

    full_message = f"{stats_text}\n\n*–ü—Ä–æ–≥—Ä–µ—Å:*\n{progress_bar}"

    bot.send_message(message.chat.id, full_message, parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == '‚öîÔ∏è –ù–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å' and is_brother(message.from_user.id))
def add_activity_start(message):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –±—Ä–∞—Ç–∞)"""
    user_id = message.from_user.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üè¥‚Äç‚ò†Ô∏è –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞')
    btn2 = types.KeyboardButton('üí™ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è')
    btn3 = types.KeyboardButton('üßò –†–æ–∑–º–∏–Ω–∫–∞')
    btn4 = types.KeyboardButton('üîÆ –Ü–Ω—à–µ')
    btn5 = types.KeyboardButton('üö™ –ù–∞–∑–∞–¥')
    markup.add(btn1, btn2, btn3, btn4, btn5)

    user_sessions[user_id] = {'state': 'choosing_activity'}

    bot.send_message(
        message.chat.id,
        "üéØ *–û–±–µ—Ä–∏ —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:*\n\n_–Ø–∫—É –Ω–∞–≤–∏—á–∫—É —Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –ø—Ä–æ–∫–∞—á–∞–≤?_",
        reply_markup=markup,
        parse_mode='Markdown'
    )


@bot.message_handler(
    func=lambda message: message.text in ['üè¥‚Äç‚ò†Ô∏è –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞', 'üí™ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', 'üßò –†–æ–∑–º–∏–Ω–∫–∞'] and is_brother(
        message.from_user.id))
def main_activity_chosen(message):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –æ—Å–Ω–æ–≤–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    user_id = message.from_user.id

    activity_map = {
        'üè¥‚Äç‚ò†Ô∏è –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞': 'english',
        'üí™ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è': 'workout',
        'üßò –†–æ–∑–º–∏–Ω–∫–∞': 'stretching'
    }

    activity_key = activity_map[message.text]
    activity_name = message.text

    if user_id not in user_sessions:
        user_sessions[user_id] = {}

    user_sessions[user_id].update({
        'state': 'choosing_duration',
        'activity_type': activity_key,
        'activity_name': activity_name
    })

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('‚ö° 5 —Ö–≤')
    btn2 = types.KeyboardButton('üöÄ 15 —Ö–≤')
    btn3 = types.KeyboardButton('üí´ 30 —Ö–≤')
    btn4 = types.KeyboardButton('üî• 45 —Ö–≤')
    btn5 = types.KeyboardButton('üåü 1+ –≥–æ–¥')
    btn6 = types.KeyboardButton('üö™ –ù–∞–∑–∞–¥')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)

    bot.send_message(
        message.chat.id,
        f"‚è≥ *–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É —Ç–∏ –ø—Ä–∏—Å–≤—è—Ç–∏–≤?*\n\n_–û–±–µ—Ä–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ç–≤–æ–≥–æ –ø–æ–¥–≤–∏–≥—É:_",
        reply_markup=markup,
        parse_mode='Markdown'
    )


@bot.message_handler(
    func=lambda message: message.text in ['‚ö° 5 —Ö–≤', 'üöÄ 15 —Ö–≤', 'üí´ 30 —Ö–≤', 'üî• 45 —Ö–≤', 'üåü 1+ –≥–æ–¥'] and
                         user_sessions.get(message.from_user.id, {}).get('state') == 'choosing_duration' and
                         is_brother(message.from_user.id))
def duration_chosen(message):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
    user_id = message.from_user.id
    user_session = user_sessions.get(user_id, {})
    activity_type = user_session.get('activity_type')

    # –ú–∞–ø–∏–º–æ –Ω–æ–≤—ñ –Ω–∞–∑–≤–∏ –¥–æ —Å—Ç–∞—Ä–∏—Ö –∑–Ω–∞—á–µ–Ω—å
    duration_map = {
        '‚ö° 5 —Ö–≤': '‚â§ 5 —Ö–≤.',
        'üöÄ 15 —Ö–≤': '‚â§ 15 —Ö–≤.',
        'üí´ 30 —Ö–≤': '‚â§ 30 —Ö–≤.',
        'üî• 45 —Ö–≤': '‚â§ 45 —Ö–≤.',
        'üåü 1+ –≥–æ–¥': '‚â• 1 –≥–æ–¥.'
    }

    duration = duration_map[message.text]

    if not activity_type:
        bot.send_message(message.chat.id, "‚ö° –ü–æ–º–∏–ª–∫–∞! –ü–æ—á–Ω–∏ —Å–ø–æ—á–∞—Ç–∫—É.")
        show_main_menu(message.chat.id, "–û–±–µ—Ä–∏ –¥—ñ—é:")
        return

    user_sessions[user_id]['duration'] = duration

    if duration == '‚â• 1 –≥–æ–¥.':
        # –î–ª—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ ‚â• 1 –≥–æ–¥. - –∑–∞–ø–∏—Ç—É—î–º–æ –æ–ø–∏—Å
        user_sessions[user_id]['state'] = 'waiting_description_long'
        markup = types.ReplyKeyboardRemove()
        bot.send_message(
            message.chat.id,
            "üìñ *–û–ø–∏—à–∏ —Å–≤—ñ–π –ø–æ–¥–≤–∏–≥!*\n\n_–©–æ —Å–∞–º–µ —Ç–∏ —Ä–æ–±–∏–≤? –Ø–∫—ñ –≤–ø—Ä–∞–≤–∏, —Ç–µ–º–∏ —á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω—É–≤–∞–≤?_",
            reply_markup=markup,
            parse_mode='Markdown'
        )
    else:
        user_sessions[user_id]['state'] = 'waiting_photo_short'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('üì∏ –î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ')
        btn2 = types.KeyboardButton('üé≠ –ë–µ–∑ —Ñ–æ—Ç–æ')
        markup.add(btn1, btn2)

        points = DURATION_POINTS[duration]
        bot.send_message(
            message.chat.id,
            f"üì∏ *–î–æ–∫–∞–∑–∏ –ø–æ–¥–≤–∏–≥—É!*\n\n_–î–æ–¥–∞–π —Ñ–æ—Ç–æ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (+{points} XP)_",
            reply_markup=markup,
            parse_mode='Markdown'
        )


@bot.message_handler(func=lambda message:
user_sessions.get(message.from_user.id, {}).get('state') == 'waiting_description_long' and
is_brother(message.from_user.id))
def description_long_received(message):
    """–û–±—Ä–æ–±–ª—è—î –æ–ø–∏—Å –¥–ª—è —Ç—Ä–∏–≤–∞–ª–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (‚â• 1 –≥–æ–¥.)"""
    user_id = message.from_user.id
    user_sessions[user_id].update({
        'state': 'waiting_photo_long',
        'description': message.text
    })

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üì∏ –î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ')
    btn2 = types.KeyboardButton('üé≠ –ë–µ–∑ —Ñ–æ—Ç–æ')
    markup.add(btn1, btn2)

    bot.send_message(
        message.chat.id,
        "üì∏ *–ß–∞—Å –¥–ª—è –¥–æ–∫–∞–∑—ñ–≤!*\n\n_–¢–µ–ø–µ—Ä –¥–æ–¥–∞–π —Ñ–æ—Ç–æ —Ç–≤–æ–≥–æ –ø–æ–¥–≤–∏–≥—É:_",
        reply_markup=markup,
        parse_mode='Markdown'
    )


@bot.message_handler(func=lambda message: message.text == 'üîÆ –Ü–Ω—à–µ' and is_brother(message.from_user.id))
def other_activity_chosen(message):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ '–Ü–Ω—à–µ'"""
    user_id = message.from_user.id

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Å–µ—Å—ñ—ó
    if user_id not in user_sessions:
        user_sessions[user_id] = {}

    user_sessions[user_id].update({
        'state': 'waiting_description_other',
        'activity_type': 'other',
        'activity_name': 'üîÆ –Ü–Ω—à–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'
    })

    markup = types.ReplyKeyboardRemove()
    bot.send_message(
        message.chat.id,
        "üîÆ *–û–ø–∏—à–∏ —Å–≤–æ—é —Ç–∞—î–º–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å!*\n\n_–©–æ —Ü—ñ–∫–∞–≤–æ–≥–æ —Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ —Ä–æ–±–∏–≤? –û–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω–æ:_",
        reply_markup=markup,
        parse_mode='Markdown'
    )


@bot.message_handler(func=lambda message:
user_sessions.get(message.from_user.id, {}).get('state') == 'waiting_description_other' and
is_brother(message.from_user.id))
def description_other_received(message):
    """–û–±—Ä–æ–±–ª—è—î –æ–ø–∏—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ '–Ü–Ω—à–µ'"""
    user_id = message.from_user.id
    user_sessions[user_id].update({
        'state': 'waiting_photo_other',
        'description': message.text
    })

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üì∏ –î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ')
    btn2 = types.KeyboardButton('üé≠ –ë–µ–∑ —Ñ–æ—Ç–æ')
    markup.add(btn1, btn2)

    bot.send_message(
        message.chat.id,
        "üì∏ *–î–æ–∫–∞–∑–∏ —Ç–∞—î–º–Ω–∏—Ü—ñ!*\n\n_–î–æ–¥–∞–π —Ñ–æ—Ç–æ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:_",
        reply_markup=markup,
        parse_mode='Markdown'
    )



@bot.message_handler(
    func=lambda message: message.text in ['üì∏ –î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ', 'üé≠ –ë–µ–∑ —Ñ–æ—Ç–æ'] and is_brother(message.from_user.id))
def photo_choice(message):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —â–æ–¥–æ —Ñ–æ—Ç–æ"""
    user_id = message.from_user.id
    user_session = user_sessions.get(user_id, {})

    if message.text == 'üé≠ –ë–µ–∑ —Ñ–æ—Ç–æ':
        # –ó–∞–≤–µ—Ä—à—É—î–º–æ –±–µ–∑ —Ñ–æ—Ç–æ
        finish_activity(message, has_photo=False)
    else:
        user_session['state'] = 'waiting_photo_file'
        bot.send_message(
            message.chat.id,
            "üñºÔ∏è *–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ —Ç–≤–æ–≥–æ –ø–æ–¥–≤–∏–≥—É!*",
            reply_markup=types.ReplyKeyboardRemove(),
            parse_mode='Markdown'
        )


@bot.message_handler(content_types=['photo'],
                     func=lambda message:
                     user_sessions.get(message.from_user.id, {}).get('state') in ['waiting_photo_file',
                                                                                  'waiting_photo_short',
                                                                                  'waiting_photo_long',
                                                                                  'waiting_photo_other'] and
                     is_brother(message.from_user.id))
def photo_received(message):
    """–û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–µ —Ñ–æ—Ç–æ –≤—ñ–¥ –±—Ä–∞—Ç–∞"""
    user_id = message.from_user.id
    user_sessions[user_id]['photo_file_id'] = message.photo[-1].file_id
    finish_activity(message, has_photo=True)


def finish_activity(message, has_photo=False):
    """–ó–∞–≤–µ—Ä—à—É—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è –±—Ä–∞—Ç–∞"""
    user_id = message.from_user.id
    user_session = user_sessions.get(user_id, {})

    activity_type = user_session.get('activity_type')
    activity_name = user_session.get('activity_name', '')
    duration = user_session.get('duration', '')
    description = user_session.get('description', '')
    photo_file_id = user_session.get('photo_file_id')

    if not activity_type:
        bot.send_message(message.chat.id, "‚ö° –ü–æ–º–∏–ª–∫–∞! –ü–æ—á–Ω–∏ —Å–ø–æ—á–∞—Ç–∫—É.")
        show_main_menu(message.chat.id, "–û–±–µ—Ä–∏ –¥—ñ—é:")
        return

    user_data = get_user_data(user_id)
    if not user_data:
        bot.send_message(message.chat.id, "üîÆ –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∞–Ω–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return

    needs_review = False
    points_earned = 0

    if activity_type == 'other' or duration == '‚â• 1 –≥–æ–¥.':
        needs_review = True

        if activity_type == 'other':
            duration = "–°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –º—ñ—Å—ñ—è"

        log_row_id = add_activity_log(user_id, activity_type, description, duration, 0, has_photo, True, photo_file_id,
                                      False)

        if activity_type == 'other':
            admin_message_text = (
                f"üîî *–ü–û–¢–†–Ü–ë–ù–ê –û–¶–Ü–ù–ö–ê –°–ü–ï–¶–Ü–ê–õ–¨–ù–û–á –ú–Ü–°–Ü–á!*\n\n"
                f"üßô *–£—á–µ–Ω—å:* {user_data['first_name']}\n"
                f"üéØ *–¢–∏–ø:* –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n"
                f"üìñ *–û–ø–∏—Å:* {description}\n"
                f"üì∏ *–î–æ–∫–∞–∑–∏:* {'–¢–∞–∫' if has_photo else '–ù—ñ'}\n\n"
                f"_–û—Ü—ñ–Ω–∏ –ø–æ–¥–≤–∏–≥ —É—á–Ω—è:_"
            )
        else:
            admin_message_text = (
                f"üîî *–ü–û–¢–†–Ü–ë–ù–ê –û–¶–Ü–ù–ö–ê –í–ï–õ–ò–ö–û–ì–û –ü–û–î–í–ò–ì–£!*\n\n"
                f"üßô *–£—á–µ–Ω—å:* {user_data['first_name']}\n"
                f"üéØ *–¢–∏–ø:* {activity_name}\n"
                f"‚è±Ô∏è *–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:* {duration}\n"
                f"üìñ *–û–ø–∏—Å:* {description}\n"
                f"üì∏ *–î–æ–∫–∞–∑–∏:* {'–¢–∞–∫' if has_photo else '–ù—ñ'}\n\n"
                f"_–û—Ü—ñ–Ω–∏ –ø–æ–¥–≤–∏–≥ —É—á–Ω—è:_"
            )

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('‚≠ê –û—Ü—ñ–Ω–∏—Ç–∏ –ø–æ–¥–≤–∏–≥', callback_data=f'review_{log_row_id}'))

        if has_photo and photo_file_id:
            bot.send_photo(MY_ID, photo_file_id, caption=admin_message_text, reply_markup=markup, parse_mode='Markdown')
        else:
            bot.send_message(MY_ID, admin_message_text, reply_markup=markup, parse_mode='Markdown')

    else:
        # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
        points_earned = DURATION_POINTS.get(duration, 0)
        new_count = user_data[activity_type] + 1
        new_total = user_data['total_points'] + points_earned

        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
        updates = {
            activity_type: new_count,
            'total_points': new_total,
            'last_activity': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

        if update_user_data(user_id, updates):
            # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –≤ –ª–æ–≥
            log_row_id = add_activity_log(user_id, activity_type, description, duration, points_earned, has_photo,
                                          False, photo_file_id, True)

            gift_data = get_gift_data()

            success_text = (
                f"üéâ *–ü–û–î–í–ò–ì –ó–ê–†–ï–Ñ–°–¢–†–û–í–ê–ù–û!* üéâ\n\n"
                f"üèÖ *–¢–∏–ø:* {activity_name}\n"
                f"‚è±Ô∏è *–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:* {duration}\n"
                f"üì∏ *–î–æ–∫–∞–∑–∏:* {'–¢–∞–∫' if has_photo else '–ù—ñ'}\n"
                f"‚≠ê *–û—Ç—Ä–∏–º–∞–Ω–æ –¥–æ—Å–≤—ñ–¥—É:* +{points_earned} XP\n"
                f"üí´ *–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Å–≤—ñ–¥:* {new_total} XP\n\n"
                f"*–ü—Ä–æ–≥—Ä–µ—Å –¥–æ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ—ó –Ω–∞–≥–æ—Ä–æ–¥–∏:*\n"
                f"{create_progress_bar(new_total, gift_data['goal'])}"
            )

            if has_photo and photo_file_id:
                bot.send_photo(
                    message.chat.id,
                    photo_file_id,
                    caption=success_text,
                    parse_mode='Markdown'
                )
            else:
                bot.send_message(message.chat.id, success_text, parse_mode='Markdown')

            check_and_send_gift(message.chat.id, user_id, user_data, new_total)

        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö!")

    if needs_review:
        if activity_type == 'other':
            review_text = (
                f"‚è≥ *–°–ü–ï–¶–Ü–ê–õ–¨–ù–ê –ú–Ü–°–Ü–Ø –í–Ü–î–ü–†–ê–í–õ–ï–ù–ê –ù–ê –ü–ï–†–ï–í–Ü–†–ö–£!*\n\n"
                f"üìñ *–û–ø–∏—Å:* {description}\n"
                f"üì∏ *–î–æ–∫–∞–∑–∏:* {'–¢–∞–∫' if has_photo else '–ù—ñ'}\n\n"
                f"_–û—á—ñ–∫—É–π –æ—Ü—ñ–Ω–∫–∏ –≤—ñ–¥ –í–æ–ª–æ–¥–∞—Ä—è!_"
            )
        else:
            review_text = (
                f"‚è≥ *–í–ï–õ–ò–ö–ò–ô –ü–û–î–í–ò–ì –í–Ü–î–ü–†–ê–í–õ–ï–ù–ò–ô –ù–ê –ü–ï–†–ï–í–Ü–†–ö–£!*\n\n"
                f"üèÖ *–¢–∏–ø:* {activity_name}\n"
                f"‚è±Ô∏è *–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:* {duration}\n"
                f"üìñ *–û–ø–∏—Å:* {description}\n"
                f"üì∏ *–î–æ–∫–∞–∑–∏:* {'–¢–∞–∫' if has_photo else '–ù—ñ'}\n\n"
                f"_–û—á—ñ–∫—É–π –æ—Ü—ñ–Ω–∫–∏ –≤—ñ–¥ –í–æ–ª–æ–¥–∞—Ä—è!_"
            )

        if has_photo and photo_file_id:
            bot.send_photo(
                message.chat.id,
                photo_file_id,
                caption=review_text,
                parse_mode='Markdown'
            )
        else:
            bot.send_message(message.chat.id, review_text, parse_mode='Markdown')

    if user_id in user_sessions:
        del user_sessions[user_id]

    show_main_menu(message.chat.id, "üéÆ *–ß—É–¥–æ–≤–æ! –©–æ –¥–∞–ª—ñ, –º—ñ–π –¥—Ä—É–∂–µ?*")


@bot.message_handler(func=lambda message: message.text == 'üéÅ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞' and is_brother(message.from_user.id))
def show_current_gift(message):
    """–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫ —ñ –ø—Ä–æ–≥—Ä–µ—Å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –±—Ä–∞—Ç–∞)"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    gift_data = get_gift_data()

    if not user_data:
        bot.send_message(message.chat.id, "üîÆ –î–∞–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
        return

    gift_description = (
        f"üéÅ *–õ–ï–ì–ï–ù–î–ê–†–ù–ê –ù–ê–ì–û–†–û–î–ê:*\n\n"
        f"{gift_data['description']}\n\n"
        f"‚öîÔ∏è *–¢–∏ –æ—Ç—Ä–∏–º–∞—î—à —Ü—é –Ω–∞–≥–æ—Ä–æ–¥—É, –∫–æ–ª–∏ –¥–æ—Å—è–≥–Ω–µ—à –º–µ—Ç–∏!* ‚öîÔ∏è"
    )

    progress_bar = create_progress_bar(user_data['total_points'], gift_data['goal'])

    full_message = f"{gift_description}\n\n*–¢–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å:*\n{progress_bar}"

    if gift_data.get('photo_file_id'):
        bot.send_photo(message.chat.id, gift_data['photo_file_id'], caption=full_message, parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, full_message, parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == 'üö™ –ù–∞–∑–∞–¥' and is_brother(message.from_user.id))
def back_to_main(message):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –±—Ä–∞—Ç–∞)"""
    user_id = message.from_user.id
    if user_id in user_sessions:
        del user_sessions[user_id]

    show_main_menu(message.chat.id, "üéÆ *–ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é!*")


@bot.message_handler(func=lambda message: message.text == 'üëë –ü–∞–Ω–µ–ª—å –í–æ–ª–æ–¥–∞—Ä—è' and is_admin(message.from_user.id))
def admin_panel(message):
    """–ü–æ–∫–∞–∑—É—î –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"""
    admin_command(message)


def check_and_send_gift(chat_id, user_id, user_data, new_total_points):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –º–µ—Ç–∏ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–¥–∞—Ä—É–Ω–æ–∫"""
    gift_data = get_gift_data()
    goal = gift_data['goal']

    if new_total_points >= goal:
        gift_message = (
            f"üéâüéâüéâ *–í–ï–õ–ò–ö–ê –ü–ï–†–ï–ú–û–ì–ê!* üéâüéâüéâ\n\n"
            f"‚öîÔ∏è *–¢–∏ –¥–æ—Å—è–≥ –º–µ—Ç–∏ –≤ {goal} XP!*\n"
            f"üèÜ *–¢–≤–æ—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞:* {gift_data['description']}\n\n"
            f"üßô *–í–æ–ª–æ–¥–∞—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ —Ç–æ–±–æ—é –¥–ª—è –≤—Ä—É—á–µ–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏!* üéÅ"
        )

        updates = {
            'gifts_received': user_data['gifts_received'] + 1,
            'total_points': new_total_points - goal,
            'goal': goal
        }
        update_user_data(user_id, updates)

        if gift_data.get('photo_file_id'):
            bot.send_photo(chat_id, gift_data['photo_file_id'], caption=gift_message, parse_mode='Markdown')
        else:
            bot.send_message(chat_id, gift_message, parse_mode='Markdown')

        admin_message = (
            f"üëë *–£–ß–ï–ù–¨ –î–û–°–Ø–ì –ú–ï–¢–ò!*\n\n"
            f"üßô *–£—á–µ–Ω—å:* {user_data['first_name']}\n"
            f"üÜî *ID:* {user_id}\n"
            f"‚≠ê *–î–æ—Å–≤—ñ–¥:* {new_total_points} XP\n"
            f"üéÅ *–ù–µ –∑–∞–±—É–¥—å –≤—Ä—É—á–∏—Ç–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É –Ω–∞–≥–æ—Ä–æ–¥—É!*"
        )
        bot.send_message(MY_ID, admin_message, parse_mode='Markdown')


@bot.message_handler(commands=['admin'])
def admin_command(message):
    """–ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ç–µ–±–µ)"""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "üö´ *–¶—è –∫–æ–º–∞–Ω–¥–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –í–æ–ª–æ–¥–∞—Ä—è!*", parse_mode='Markdown')
        return

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–Ω—è', callback_data='admin_stats')
    btn2 = types.InlineKeyboardButton('‚ö° –°–∫–∏–Ω—É—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å', callback_data='admin_reset')
    btn3 = types.InlineKeyboardButton('üéØ –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–ª—å', callback_data='admin_goal')
    btn4 = types.InlineKeyboardButton('‚≠ê –î–æ–¥–∞—Ç–∏ –¥–æ—Å–≤—ñ–¥', callback_data='custom_points')
    markup.add(btn1, btn2, btn3, btn4)

    bot.send_message(message.chat.id, "üëë *–ü–ê–ù–ï–õ–¨ –í–û–õ–û–î–ê–†–Ø:*", reply_markup=markup, parse_mode='Markdown')


@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_review_'))
def handle_cancel_review(call):
    """–û–±—Ä–æ–±–ª—è—î —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏"""
    print(f"üîÑ –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è!")
    print(f"üì® Callback data: {call.data}")
    print(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {call.from_user.id} ({call.from_user.first_name})")

    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É!")
        return

    try:
        parts = call.data.split('_')
        print(f"üîç –†–æ–∑–±–∏—Ç–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏: {parts}")

        if len(parts) >= 4:
            log_row_id = int(parts[2])
            points = int(parts[3])

            print(f"üìä ID –∑–∞–ø–∏—Å—É: {log_row_id}, –ë–∞–ª–∏ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: {points}")

            user_data = get_user_data(BROTHER_ID)
            if not user_data:
                print("‚ùå –î–∞–Ω—ñ –±—Ä–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
                bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω—ñ –±—Ä–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
                return

            print(f"üìà –ü–æ—Ç–æ—á–Ω—ñ –±–∞–ª–∏ –±—Ä–∞—Ç–∞: {user_data['total_points']}")

            new_total = user_data['total_points'] - points
            if new_total < 0:
                new_total = 0

            updates = {
                'total_points': new_total,
                'last_activity': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }

            print(f"üîÑ –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ: {updates}")

            if update_user_data(BROTHER_ID, updates):
                print("‚úÖ –î–∞–Ω—ñ –±—Ä–∞—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –±—Ä–∞—Ç–∞")

            # –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–≥
            log_updates = {
                "points_earned": 0,
                "admin_reviewed": "–°–∫–∞—Å–æ–≤–∞–Ω–æ"
            }

            if update_activity_log(log_row_id, log_updates):
                print("‚úÖ –õ–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–≥—É")

            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
                print("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–æ")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞: {e}")

            try:
                brother_message = f"‚ùå –û—Ü—ñ–Ω–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í—ñ–¥–Ω—ñ–º–∞–Ω–æ {points} –±–∞–ª—ñ–≤."
                bot.send_message(BROTHER_ID, brother_message)
                print("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—Ä–∞—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—Ä–∞—Ç—É: {e}")

            try:
                admin_message = f"‚ùå –û—Ü—ñ–Ω–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í—ñ–¥–Ω—ñ–º–∞–Ω–æ {points} –±–∞–ª—ñ–≤."
                bot.send_message(call.message.chat.id, admin_message)
                print("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")

            bot.answer_callback_query(call.id, "‚úÖ –û—Ü—ñ–Ω–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞!")
            print("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å callback –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞")

        else:
            error_msg = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback_data"
            print(error_msg)
            bot.answer_callback_query(call.id, error_msg)

    except Exception as e:
        error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –æ—Ü—ñ–Ω–∫–∏: {e}"
        print(error_msg)
        logger.error(error_msg)
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ")

@bot.callback_query_handler(func=lambda call: True)
def handle_admin_buttons(call):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"""
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É!")
        return

    if call.data == 'admin_stats':
        user_data = get_user_data(BROTHER_ID)
        if user_data:
            stats_text = (
                f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–∞—Ç–∞:</b>\n\n"
                f"–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞: {user_data['english']} —Ä–∞–∑—ñ–≤\n"
                f"–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {user_data['workout']} —Ä–∞–∑—ñ–≤\n"
                f"–†–æ–∑–º–∏–Ω–∫–∞: {user_data['stretching']} —Ä–∞–∑—ñ–≤\n"
                f"–Ü–Ω—à–µ: {user_data['other']} —Ä–∞–∑—ñ–≤\n\n"
                f"–í—Å—å–æ–≥–æ –±–∞–ª—ñ–≤: {user_data['total_points']}\n"
                f"–ú–µ—Ç–∞: {user_data['goal']}\n"
                f"–ü–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ: {user_data['gifts_received']}"
            )
            bot.send_message(call.message.chat.id, stats_text, parse_mode='HTML')
        else:
            bot.send_message(call.message.chat.id, "–î–∞–Ω—ñ –±—Ä–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")

    elif call.data == 'admin_reset':
        user_data = get_user_data(BROTHER_ID)
        if user_data:
            updates = {
                'english': 0,
                'workout': 0,
                'stretching': 0,
                'other': 0,
                'total_points': 0,
                'last_activity': ''
            }
            if update_user_data(BROTHER_ID, updates):
                bot.send_message(call.message.chat.id, "‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–∞—Ç–∞ —Å–∫–∏–Ω—É—Ç–∞!")
                bot.send_message(BROTHER_ID, "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–ª–∞ —Å–∫–∏–Ω—É—Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            else:
                bot.send_message(call.message.chat.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    elif call.data == 'admin_goal':
        admin_goal_sessions[call.from_user.id] = {'state': 'waiting_goal_description'}
        bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –æ–ø–∏—Å –ø–æ–¥–∞—Ä—É–Ω–∫–∞:")

    elif call.data == 'custom_points':
        admin_review_sessions[call.from_user.id] = {'state': 'waiting_custom_points'}
        bot.send_message(call.message.chat.id, "üí∞ –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤ –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±—Ä–∞—Ç—É:")

    elif call.data.startswith('review_'):
        log_row_id = int(call.data.split('_')[1])
        admin_review_sessions[call.from_user.id] = {
            'state': 'waiting_review_points',
            'log_row_id': log_row_id
        }
        bot.send_message(call.message.chat.id, "‚≠ê –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤ –¥–ª—è —Ü—ñ—î—ó —Ä–æ–±–æ—Ç–∏:")

    bot.answer_callback_query(call.id)


@bot.message_handler(func=lambda message:
admin_review_sessions.get(message.from_user.id, {}).get('state') == 'waiting_custom_points' and
is_admin(message.from_user.id))
def handle_custom_points(message):
    """–û–±—Ä–æ–±–ª—è—î –¥–æ–≤—ñ–ª—å–Ω—É –æ—Ü—ñ–Ω–∫—É –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞"""
    try:
        points = int(message.text)
        user_data = get_user_data(BROTHER_ID)
        if user_data:
            new_total = user_data['total_points'] + points
            updates = {
                'total_points': new_total,
                'last_activity': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            update_user_data(BROTHER_ID, updates)

            log_row_id = add_activity_log(BROTHER_ID, "custom", f"–î–æ–≤—ñ–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –∞–¥–º—ñ–Ω–∞: {points} –±–∞–ª—ñ–≤", "", points,
                                          False, False, None, True)

            # –°–ø–æ–≤—ñ—â–∞—î–º–æ –±—Ä–∞—Ç–∞
            success_text = (
                f"üéâ <b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—Ä–∞—Ö—É–≤–∞–≤ –±–∞–ª–∏!</b>\n\n"
                f"‚≠ê –û—Ç—Ä–∏–º–∞–Ω–æ –±–∞–ª—ñ–≤: +{points}\n"
                f"üí∞ –í—Å—å–æ–≥–æ –±–∞–ª—ñ–≤: {new_total}"
            )

            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Ü—ñ–Ω–∫—É', callback_data=f'cancel_review_{log_row_id}_{points}'))

            brother_message = bot.send_message(BROTHER_ID, success_text, reply_markup=markup, parse_mode='HTML')

            admin_success_text = f"‚úÖ –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ {points} –±–∞–ª—ñ–≤ –±—Ä–∞—Ç—É!"
            admin_message = bot.send_message(message.chat.id, admin_success_text, reply_markup=markup)

            admin_review_sessions[message.from_user.id] = {
                'state': 'review_completed',
                'log_row_id': log_row_id,
                'points': points,
                'brother_message_id': brother_message.message_id,
                'admin_message_id': admin_message.message_id,
                'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }

            check_and_send_gift(BROTHER_ID, BROTHER_ID, user_data, new_total)
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –±—Ä–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –±–∞–ª—ñ–≤")

    # –û—á–∏—â–∞—î–º–æ —Å–µ—Å—ñ—é
    if message.from_user.id in admin_review_sessions and admin_review_sessions[message.from_user.id][
        'state'] != 'review_completed':
        del admin_review_sessions[message.from_user.id]


@bot.message_handler(func=lambda message:
admin_review_sessions.get(message.from_user.id, {}).get('state') == 'waiting_review_points' and
is_admin(message.from_user.id))
def handle_review_points(message):
    """–û–±—Ä–æ–±–ª—è—î –æ—Ü—ñ–Ω–∫—É —Ä–æ–±–æ—Ç–∏ –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞"""
    try:
        points = int(message.text)
        admin_session = admin_review_sessions.get(message.from_user.id, {})
        log_row_id = admin_session.get('log_row_id')

        if not log_row_id:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å –¥–ª—è –æ—Ü—ñ–Ω–∫–∏")
            return

        update_activity_log(log_row_id, {
            "points_earned": points,
            "admin_reviewed": "–¢–∞–∫"
        })

        user_data = get_user_data(BROTHER_ID)
        if user_data:
            new_total = user_data['total_points'] + points
            updates = {
                'total_points': new_total,
                'last_activity': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            update_user_data(BROTHER_ID, updates)

            success_text = (
                f"üéâ <b>–¢–≤–æ—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –æ—Ü—ñ–Ω–µ–Ω–æ!</b>\n\n"
                f"‚≠ê –û—Ç—Ä–∏–º–∞–Ω–æ –±–∞–ª—ñ–≤: +{points}\n"
                f"üí∞ –í—Å—å–æ–≥–æ –±–∞–ª—ñ–≤: {new_total}"
            )

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Ü—ñ–Ω–∫—É', callback_data=f'cancel_review_{log_row_id}_{points}'))

            brother_message = bot.send_message(BROTHER_ID, success_text, reply_markup=markup, parse_mode='HTML')

            admin_success_text = f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –æ—Ü—ñ–Ω–µ–Ω–∞!\n–ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: {points} –±–∞–ª—ñ–≤"
            admin_message = bot.send_message(message.chat.id, admin_success_text, reply_markup=markup)

            admin_review_sessions[message.from_user.id] = {
                'state': 'review_completed',
                'log_row_id': log_row_id,
                'points': points,
                'brother_message_id': brother_message.message_id,
                'admin_message_id': admin_message.message_id,
                'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }

            check_and_send_gift(BROTHER_ID, BROTHER_ID, user_data, new_total)
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –±—Ä–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –±–∞–ª—ñ–≤")

    # –û—á–∏—â–∞—î–º–æ —Å–µ—Å—ñ—é
    if message.from_user.id in admin_review_sessions and admin_review_sessions[message.from_user.id][
        'state'] != 'review_completed':
        del admin_review_sessions[message.from_user.id]


@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_review_'))
def handle_cancel_review(call):
    """–û–±—Ä–æ–±–ª—è—î —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏"""
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É!")
        return

    try:
        parts = call.data.split('_')
        if len(parts) >= 4:
            log_row_id = int(parts[2])
            points = int(parts[3])

            user_data = get_user_data(BROTHER_ID)
            if user_data:
                new_total = user_data['total_points'] - points
                updates = {
                    'total_points': max(0, new_total),  # –ù–µ –º–µ–Ω—à–µ 0
                    'last_activity': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
                update_user_data(BROTHER_ID, updates)

                update_activity_log(log_row_id, {
                    "points_earned": 0,
                    "admin_reviewed": "–°–∫–∞—Å–æ–≤–∞–Ω–æ"
                })

            brother_message_id = None
            admin_message_id = None

            for user_id, session in admin_review_sessions.items():
                if session.get('log_row_id') == log_row_id:
                    brother_message_id = session.get('brother_message_id')
                    admin_message_id = session.get('admin_message_id')
                    # –í–∏–¥–∞–ª—è—î–º–æ —Å–µ—Å—ñ—é
                    if user_id in admin_review_sessions:
                        del admin_review_sessions[user_id]
                    break

            if brother_message_id:
                try:
                    bot.delete_message(BROTHER_ID, brother_message_id)
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—Ä–∞—Ç–∞: {e}")

            if admin_message_id:
                try:
                    bot.delete_message(call.message.chat.id, admin_message_id)
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞: {e}")

            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

            # –°–ø–æ–≤—ñ—â–∞—î–º–æ –±—Ä–∞—Ç–∞
            bot.send_message(BROTHER_ID, "‚ùå –û—Ü—ñ–Ω–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

            bot.send_message(call.message.chat.id, f"‚ùå –û—Ü—ñ–Ω–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í—ñ–¥–Ω—ñ–º–∞–Ω–æ {points} –±–∞–ª—ñ–≤.")

            bot.answer_callback_query(call.id, "‚úÖ –û—Ü—ñ–Ω–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞!")
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –æ—Ü—ñ–Ω–∫–∏: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ")


@bot.message_handler(func=lambda message:
admin_goal_sessions.get(message.from_user.id, {}).get('state') == 'waiting_goal_description' and
is_admin(message.from_user.id))
def handle_goal_description(message):
    """–û–±—Ä–æ–±–ª—è—î –æ–ø–∏—Å –Ω–æ–≤–æ—ó –º–µ—Ç–∏"""
    admin_goal_sessions[message.from_user.id] = {
        'state': 'waiting_goal_points',
        'description': message.text
    }
    bot.send_message(message.chat.id, "üéØ –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤ –¥–ª—è –Ω–æ–≤–æ—ó –º–µ—Ç–∏:")


@bot.message_handler(func=lambda message:
admin_goal_sessions.get(message.from_user.id, {}).get('state') == 'waiting_goal_points' and
is_admin(message.from_user.id))
def handle_goal_points(message):
    """–û–±—Ä–æ–±–ª—è—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤ –¥–ª—è –Ω–æ–≤–æ—ó –º–µ—Ç–∏"""
    try:
        goal_points = int(message.text)
        admin_session = admin_goal_sessions.get(message.from_user.id, {})
        description = admin_session.get('description', '')

        updates = {
            'goal': goal_points,
            'description': description
        }

        bot.send_message(message.chat.id, "üì∏ –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–¥–∞—Ä—É–Ω–∫–∞ (–∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤ /skip —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏):")
        admin_goal_sessions[message.from_user.id] = {
            'state': 'waiting_goal_photo',
            'description': description,
            'goal': goal_points
        }

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –±–∞–ª—ñ–≤")


@bot.message_handler(content_types=['photo', 'text'],
                     func=lambda message:
                     admin_goal_sessions.get(message.from_user.id, {}).get('state') == 'waiting_goal_photo' and
                     is_admin(message.from_user.id))
def handle_goal_photo_final(message):
    """–û–±—Ä–æ–±–ª—è—î —Ñ–æ—Ç–æ –∞–±–æ –ø—Ä–æ–ø—É—Å–∫ –¥–ª—è –Ω–æ–≤–æ—ó –º–µ—Ç–∏"""
    admin_session = admin_goal_sessions.get(message.from_user.id, {})
    if not admin_session:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ—á–Ω–∏ —Å–ø–æ—á–∞—Ç–∫—É.")
        return

    photo_file_id = None
    if message.content_type == 'photo':
        photo_file_id = message.photo[-1].file_id

    updates = {
        'goal': admin_session['goal'],
        'description': admin_session['description'],
        'photo_file_id': photo_file_id
    }

    if update_gift_data(updates):
        records = sheet.get_all_records()
        for i, record in enumerate(records, start=2):
            if record.get('user_id'):
                col_index = list(record.keys()).index('goal') + 1
                sheet.update_cell(i, col_index, admin_session['goal'])

        success_text = (
            f"‚úÖ –ú–µ—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"üéØ –ù–æ–≤–∞ —Ü—ñ–ª—å: {admin_session['goal']} –±–∞–ª—ñ–≤\n"
            f"üìù –û–ø–∏—Å: {admin_session['description']}\n"
            f"üì∏ –§–æ—Ç–æ: {'–î–æ–¥–∞–Ω–æ' if photo_file_id else '–í—ñ–¥—Å—É—Ç–Ω—î'}"
        )
        bot.send_message(message.chat.id, success_text)

        bot.send_message(BROTHER_ID, "üéÅ –û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥–∞—Ä—É–Ω–æ–∫! –ù–∞—Ç–∏—Å–Ω–∏ '–ü–æ—Ç–æ—á–Ω–∏–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫' —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –∑–º—ñ–Ω–∏.")
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–µ—Ç–∏")

    if message.from_user.id in admin_goal_sessions:
        del admin_goal_sessions[message.from_user.id]


# –ó–ê–ü–£–°–ö –ë–û–¢–ê (–≤–µ—Ä—Å—ñ—è –¥–ª—è Railway)
import flask
import time

app = flask.Flask(__name__)

@app.route(f"/{TOKEN}", methods=['POST'])
def receive_update():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥ Telegram —á–µ—Ä–µ–∑ webhook"""
    try:
        update = telebot.types.Update.de_json(flask.request.stream.read().decode('utf-8'))
        bot.process_new_updates([update])
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ webhook: {e}")
    return "OK", 200


@app.route("/", methods=['GET'])
def index():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –±–æ—Ç –ø—Ä–∞—Ü—é—î"""
    return "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π üöÄ", 200


if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ Railway...")
    try:
        setup_sheets_structure()

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä—Ç —ñ URL –∑ Railway
        PORT = int(os.environ.get("PORT", 5000))
        RAILWAY_URL = os.environ.get("RAILWAY_STATIC_URL")

        if not RAILWAY_URL:
            logger.error("‚ùå –ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ RAILWAY_STATIC_URL –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        else:
            full_webhook_url = f"https://{RAILWAY_URL}/{TOKEN}"
            bot.remove_webhook()
            time.sleep(1)
            bot.set_webhook(url=full_webhook_url)
            logger.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {full_webhook_url}")

        app.run(host="0.0.0.0", port=PORT)

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")

